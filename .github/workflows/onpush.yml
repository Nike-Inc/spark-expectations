name: build
run-name: ${{ 'Build for PR ' }}${{ github.event.pull_request.number }}${{ ' by ' }}${{ github.event.pull_request.user.login }}

on:
  pull_request:
    types: [ opened, synchronize ]
  push:
    branches: [ main ]
  release:
    types: [ created ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  unittesting:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]  # FIXME: Add Windows and macOS
        os: [ubuntu-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        pyspark-version: ['34', '35', '35r']
        exclude:
          - python-version: '3.9'
            pyspark-version: '35'
          - python-version: '3.9'
            pyspark-version: '35r'
          - python-version: '3.11'
            pyspark-version: '34'
          - python-version: '3.12'
            pyspark-version: '34'

    env:
      HADOOP_USER_HOME: 'hadoop'
      UNIT_TESTING_ENV: 'spark_expectations_unit_testing_on_github_actions'

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'adopt'

    - name: Setup Kafka
      run: |
        curl -SL "https://archive.apache.org/dist/kafka/3.0.0/kafka_2.13-3.0.0.tgz" | tar -xzC /tmp
        export PATH=$PATH:/tmp/kafka_2.13-3.0.0/bin
        echo "KAFKA_HOME=/tmp/kafka_2.13-3.0.0" >> $GITHUB_ENV

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Hatch
      uses: pypa/hatch@install

    - name: Run tests
      run: hatch test --python=${{ matrix.python-version }} -i version=pyspark${{ matrix.pyspark-version }} --verbose

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.xml
        fail_ci_if_error: true


  deploy:  # TODO: update to use hatch commands
    name: Deploy to PyPi
    runs-on: ubuntu-latest
    needs:
      - unittesting
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3 # use latest version of the checkout action
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Install pip
        run: python -m pip install --upgrade pip

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1

      - name: Install build tools
        run: |
          export PATH=$PATH:$HOME/.local/bin
          poetry self add "poetry-dynamic-versioning[plugin]"

      - name: Install dependencies
        run: |
          export PATH=$PATH:$HOME/.local/bin
          make poetry

      - name: Install wheel and twine
        run: python -m pip install wheel twine

      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          export PATH=$PATH:$HOME/.local/bin
          make build
          twine upload dist/*
