[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "spark-expectations"
dynamic = ["version"]
description = 'This project helps us to run Data Quality Rules in flight while spark job is being run'
readme = "README.md"
requires-python = ">=3.9, <3.13" # 3.10 is the minimum recommended version
license = "Apache-2.0"
keywords = [
  # TODO: add keywords
]
authors = [
  # TODO: add other contributors
  { name = "Danny Meijer", email = "danny.meijer@nike.com" },
  { name = "Ashok Singamaneni", email = "ashok.singamaneni@nike.com" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "pluggy>=1",
  "pyspark>=3.0.0,<4.0.0",
  "requests>=2.28.1",
]



[project.urls]
Documentation = "https://engineering.nike.com/spark-expectations"
Issues = "https://github.com/Nike-Inc/spark-expectations/issues"
Source = "https://github.com/Nike-Inc/spark-expectations"
Project = "https://github.com/orgs/Nike-Inc/projects/3"

[project.optional-dependencies]
dev = [
  "mypy",
  "pyspark[connect]>=3.4.0,<4.0.0",
  "ruff",
  "types-requests",
  "types-setuptools",
]
test = [
  "coverage[toml]",
  "pre-commit",
  "prospector>=1.12.1,<2.0.0",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-order",
  "pytest-randomly",
  "pytest-xdist",
]
docs = [
  "mdx-include>=1.4.1,<2.0.0",
  "mike>=1.1.2",
  "mkdocs-click>=0.8.0",
  "mkdocs-markdownextradata-plugin>=0.2.5",
  "mkdocs-material-extensions>=1.3.1",
  "mkdocs-material>=9.5.13",
  "mkdocs>=1.5.3",
  "mkdocstrings[python]>=0.20.0",
]

[tool.hatch.metadata]
allow-direct-references = true


###  ~~~~~~~~~~~~~~~  ###
#  Hatch Configuration  #
###  ~~~~~~~~~~~~~~~  ###
#

[tool.hatch.version]
description = """
The version of the package is dynamically set and is maintained in the top-level `__init__.py` file of the package.
---
Bump by running `hatch version` with one of the following release types:
- `major`                     - breaking changes, i.e. 2.0.0
- `minor`                     - new features, i.e. 1.1.0
- `micro` `fix` or `patch`    - bug fixes, i.e. 1.0.1
- `a` or `alpha`              - alpha release, i.e. 1.0.0a1
- `b` or `beta`               - beta release, i.e. 1.0.0b1
- `c` `rc` `pre` or `preview` - release candidate, i.e. 1.0.0rc1
- `r` `rev` or `post`         - post release, i.e. 1.0.0.post1
- `dev`                       - development release, i.e. 1.0.0.dev1
"""
path = "src/spark_expectations/__about__.py"

[tool.hatch.envs.default]
description = """
The default environment is used for development and general use.
---
We use the `uv` installer by default. This is a superfast, Rust-based installer.
Run `hatch run` to run scripts in the default environment.

# Code Quality
To check and format the codebase, we use:
 - `ruff` for linting, formatting, and sorting imports
 - `mypy` for static type checking.
---
There are several ways to run style checks and formatting:
- `hatch run ruff-check` will check the codebase with ruff without applying fixes.
- `hatch run ruff-fmt` will format the codebase using ruff.
- `hatch run mypy-check` will check the codebase with mypy.
- `hatch run check` will run all the above checks (including pylint and mypy).
- `hatch run fmt` or `hatch run fix` will format the codebase using ruff.
- `hatch run lint` will run ruff, mypy, and pylint.

# Testing and Coverage
To run the test suite, use:
- `hatch run all-tests` to run the full test suite.
- `hatch run spark-tests` to run the Spark test suite.
- `hatch run log-versions` to log the Python and PySpark versions.
- `hatch run coverage` or `hatch run cov` to run the test suite with coverage.

Note: the full test suite is will run all tests in all specified Python and PySpark versions. If you want to run tests
against specific versions, you can add `+py=3.10` or `+version=pyspark34` to the command (replace the versions with the
desired ones).

For lighter / faster testing, use the `dev` environment with `hatch shell dev` and run the tests with `pytest` or use
the `all-tests` or `spark-tests` command.
"""
installer = "uv"
features = ["dev", "test"]


[tool.hatch.envs.default.scripts]
# Code Quality commands
ruff-fmt = "ruff format --check --diff ."
ruff-fmt-fix = "ruff format ."
ruff-check = "ruff check . --diff"
ruff-check-fix = "ruff check . --fix"
mypy-check = "mypy -p src --exclude .venv --exclude .venvs --exclude dist --exclude .idea"
check = ["- ruff-fmt", "- ruff-check", "- mypy-check", "prospector --no-autodetect --profile prospector.yaml"]
fmt = ["ruff-fmt-fix", "ruff-check-fix"]
fix = "fmt"
lint = ["- ruff-fmt", "- mypy-check"]
log-versions = "python --version && {env:HATCH_UV} pip freeze | grep pyspark"
test = "- pytest{env:HATCH_TEST_ARGS:} {args} -n 2"
spark-tests = "test -m spark"
spark-remote-tests = "test -m spark -m \"not skip_on_remote_session\""
non-spark-tests = "test -m \"not spark\""


###  ~~~~~~~~~~~~~~~~~~~~~  ###
#  Unit Testing and Coverage  #
###  ~~~~~~~~~~~~~~~~~~~~~  ###
#
[tool.hatch.envs.hatch-test]
description = """
The test environment is used to run the test suite.
---
- Run `hatch run test:all-tests` to run the full test suite.
- Run `hatch run test:spark-tests` to run the Spark test suite.
- Run `hatch run test:log-versions` to log the Python and PySpark versions.
- You can test against specific Python and PySpark versions by adding `+py=3.10` or `+version=pyspark34` to the command
  (replace the versions with the desired ones).

Note: Test env will run against all specified python and pyspark versions. Use the `dev` environment for development
and general use.
"""
template = "default"
parallel = true
retries = 2
retry-delay = 3

[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args} -v -x"
cov-combine = "coverage combine"
cov-report = "coverage report -m"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.9"]
version = ["pyspark34"]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.10"]
version = ["pyspark34", "pyspark35", "pyspark35r"]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.11", "3.12"]
version = ["pyspark35", "pyspark35r"]

[tool.hatch.envs.hatch-test.overrides]
matrix.version.extra-dependencies = [
  { value = "pyspark>=3.4,<3.5", if = [
    "pyspark34",
  ] },
  { value = "spark-expectations>=2.1.0", if = [
    "pyspark34",
  ] },
  { value = "pyspark>=3.5,<3.6", if = [
    "pyspark35",
  ] },
  { value = "pyspark[connect]>=3.5,<3.6", if = [
    "pyspark35r",
  ] },
]

name.".*".env-vars = [
  # set number of workes for parallel testing
  { key = "PYTEST_XDIST_AUTO_NUM_WORKERS", value = "2" },
]

name.".*(pyspark35r).*".env-vars = [
  # enable soark connect, setting to local as it will trigger 
  # spark to start local spark server and enbale remote session
  { key = "SPARK_REMOTE", value = "local" },
  { key = "SPARK_TESTING", value = "True" },
]

# TODO: check if these are needed
#[tool.pytest.ini_options]
#addopts = "-q --color=yes --order-scope=module"
#log_level = "CRITICAL"
#testpaths = ["tests"]
#asyncio_default_fixture_loop_scope = "scope"
#markers = [
#  "default: added to all tests by default if no other marker expect of standard pytest markers is present",
#  "spark: mark a test as a Spark test",
#  # "sftp: mark a test as an SFTP test",
#  # "se: mark a test as a Spark Expectations test",
#  # "box: mark a test as a Box test",
#  # "asyncio: mark a test as an asyncio test",
#  # "asyncio_http: mark a test as an asyncio HTTP test",
#]
#filterwarnings = [
#  # pyspark.pandas warnings
#  "ignore:distutils.*:DeprecationWarning:pyspark.pandas.*",
#  "ignore:'PYARROW_IGNORE_TIMEZONE'.*:UserWarning:pyspark.pandas.*",
#  # pydantic warnings
#  "ignore:A custom validator is returning a value other than `self`.*.*:UserWarning:pydantic.main.*",
#  "ignore:<module 'datetime' from .*.*:UserWarning:pydantic._internal.*",
#  # pyspark.sql.connect warnings
#  "ignore:is_datetime64tz_dtype.*:DeprecationWarning:pyspark.sql.connect.*",
#  "ignore:distutils.*:DeprecationWarning:pyspark.sql.connect.*",
#  # pyspark.sql.pandas warnings
#  "ignore:distutils.*:DeprecationWarning:pyspark.sql.pandas.*",
#  "ignore:is_datetime64tz_dtype.*:DeprecationWarning:pyspark.sql.pandas.*",
#  "ignore:is_categorical_dtype.*:DeprecationWarning:pyspark.sql.pandas.*",
#  "ignore:iteritems.*:FutureWarning:pyspark.sql.pandas.*",
#  # Koheesio warnings
#  "ignore:DayTimeIntervalType.*:UserWarning:koheesio.spark.snowflake.*",
#]

[tool.coverage.run]
source_pkgs = ["spark_expectations", "tests"]
branch = true
parallel = true
omit = ["src/koheesio/__about__.py", "src/koheesio/__init__.py"]

[tool.coverage.paths]
spark_expectations = ["src/spark_expectations", "*/spark_expectations/src/spark_expectations"]
tests = ["tests", "*/spark_expectations/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
omit = ["tests/*"]

###  ~~~~  ###
#  Docsite   #
###  ~~~~  ###
#
[tool.hatch.envs.docs]
description = """
The docs environment is used to build the documentation.
---
Run `hatch run docs:build` to build the documentation and `hatch run docs:serve` to serve it.
"""
# TODO: take commands from Makefile
detached = true
features = ["docs"]
scripts.build = ["mkdocs build"]
scripts.serve = ["mkdocs serve --watch ./docs/"]


###  ~~~~~~~~~~~~~~~~~~~~  ###
#  Development Environment   #
###  ~~~~~~~~~~~~~~~~~~~~  ###
#
[tool.hatch.envs.dev]
description = """
The dev environment has all the tools needed for development.

'dev' sets the default python version to 3.10 and pyspark to 3.4.
It installs in the .venv directory by default.
Point your IDE to this environment for development.
---
You can run `hatch env dev:...` to run scripts in the environment.
Activate the environment with `hatch shell dev`.

Available scripts:
- `ruff-check` - check the codebase with ruff without applying fixes.
- `ruff-fmt` - format the codebase using ruff.
- `mypy-check` - check the codebase with mypy.
- `pylint-check` - check the codebase with pylint.
- `check` - run all the above checks (including pylint and mypy).
- `fmt` or `fix` - format the codebase using black, isort, and ruff.
- `lint` - run ruff, mypy, and pylint.
- `log-versions` - log the Python and PySpark versions.
- `all-tests` - run the full test suite.
- `spark-tests` - run the Spark test suite.
- `coverage` or `cov` - run the test suite with coverage.
"""
path = ".venv"
python = "3.12"
template = "default"


###  ~~~~~~~~~~~~~~~~~~  ###
#  Code Quality and Style  #
###  ~~~~~~~~~~~~~~~~~~  ###
#

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/#using-pyprojecttoml
# https://docs.astral.sh/ruff/settings/
target-version = "py310"
line-length = 88
exclude = [
  # Exclude a variety of commonly ignored directories.
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".venv",
  ".venvs",
  "__pypackages__",
  "__notebooks__",
  "__research__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

[tool.ruff.format]
# https://docs.astral.sh/ruff/formatter/#docstring-formatting
docstring-code-format = true
docstring-code-line-length = 70

[tool.ruff.lint]
select = [
  ## pycodestyle
  "E",
  ## Pyflakes
  "F",
  ## flake8-bugbear
  # "B",
  ## flake8-annotations
  # "ANN",
  ## pyupgrade
  # "UP",
  ## flake8-simplify
  # "SIM",
  ## pep8-naming
  # "N",
  ## isort
  "I",
]
ignore = [
  "F405", # To avoid errors like '`ConfigDict` may be undefined, or defined from star imports: `pydantic`'
  "E501", # To avoid errors like 'line too long (120 > 79 characters)' -> let Black handle this instead
  "F401", # To avoid errors like 'module imported but unused' -> there are too many false positives
  "F403", # To avoid errors like 'import * used; unable to detect undefined names' -> leads to false positives
]
# Unlike Flake8, default to a complexity level of 10.
mccabe.max-complexity = 10
# Allow autofix for all enabled rules (when `--fix` is provided).
fixable = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "T",
  "W",
  "ANN",
  "ARG",
  "BLE",
  "COM",
  "DJ",
  "DTZ",
  "EM",
  "ERA",
  "EXE",
  "FBT",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
force-to-top = ["__future__", "typing"]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "pyspark",
  "first-party",
  "local-folder",
]
sections.pydantic = ["pydantic"]
sections.pyspark = ["pyspark"]
detect-same-package = true
force-sort-within-sections = true

[tool.mypy]
python_version = "3.10"
files = ["src/**/*.py"]
disallow_untyped_defs = true
ignore_missing_imports = true
follow_imports = "skip"
