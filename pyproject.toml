[tool.poetry]
name = "spark-expectations"
version = "0.0.0"
description = "This project helps us to run Data Quality Rules in flight while spark job is being run"
authors = ["Ashok Singamaneni <ashok.singamaneni@nike.com>"]
readme = "README.md"
packages = [{ include = "spark_expectations" }]

[tool.poetry.dependencies]
python = "^3.9,<3.13"
pluggy = ">=1"
pyspark = ">=3.0.0,<4.0.0"
requests = ">=2.28.1"

[tool.poetry.group.dev.dependencies]
black = "23.3.0"
botocore = "1.29.133"                                      # This is just for fixing the dependency resolution version on cerberus-python-client
cerberus-python-client = "2.5.4"
coverage = "7.2.5"
griffe = "^1.5.4"
ipykernel = "^6.29.2"
mdx-include = ">=1.4.1,<2.0.0"
mike = "1.1.2"
mkdocs = "1.5.3"
mkdocs-autorefs = "1.2.0"
mkdocs-click = "0.8.0"
mkdocs-markdownextradata-plugin = "0.2.5"
mkdocs-material = "9.4.0"
mkdocstrings = { extras = ["python"], version = "0.27.0" }
mypy = "1.3.0"
numpy = "1.26.4"
pandas = "^2.2.3"
pre-commit = "3.3.1"
prospector = "^1.12.1"
pyspark = {version=">=3.4.0, <4.0.0", extras=["connect"]}
pytest = "^8.3.3"
pytest-mock = "^3.14.0"
types-requests = "2.28.11.16"
types-setuptools = "67.7.0.2"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
bump = true
style = "semver"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"


###  ~~~~~~~~~~~~~~~~~~  ###
#  Code Quality and Style  #
###  ~~~~~~~~~~~~~~~~~~  ###
#

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/#using-pyprojecttoml
# https://docs.astral.sh/ruff/settings/
target-version = "py310"
line-length = 120 # Same as Black.
exclude = [
  # Exclude a variety of commonly ignored directories.
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".venv",
  ".venvs",
  "__pypackages__",
  "__notebooks__",
  "__research__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

[tool.ruff.format]
# https://docs.astral.sh/ruff/formatter/#docstring-formatting
docstring-code-format = true
docstring-code-line-length = 70

[tool.ruff.lint]
select = [
  ## pycodestyle
  "E",
  ## Pyflakes
  "F",
  ## flake8-bugbear
  # "B",
  ## flake8-annotations
  # "ANN",
  ## pyupgrade
  # "UP",
  ## flake8-simplify
  # "SIM",
  ## pep8-naming
  # "N",
  ## isort
  "I",
]
ignore = [
  "F405", # To avoid errors like '`ConfigDict` may be undefined, or defined from star imports: `pydantic`'
  "E501", # To avoid errors like 'line too long (120 > 79 characters)' -> let Black handle this instead
  "F401", # To avoid errors like 'module imported but unused' -> there are too many false positives
  "F403", # To avoid errors like 'import * used; unable to detect undefined names' -> leads to false positives
]
# Unlike Flake8, default to a complexity level of 10.
mccabe.max-complexity = 10
# Allow autofix for all enabled rules (when `--fix` is provided).
fixable = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "T",
  "W",
  "ANN",
  "ARG",
  "BLE",
  "COM",
  "DJ",
  "DTZ",
  "EM",
  "ERA",
  "EXE",
  "FBT",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
force-to-top = ["__future__", "typing"]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "pydantic",
  "pyspark",
  "first-party",
  "local-folder",
]
sections.pydantic = ["pydantic"]
sections.pyspark = ["pyspark"]
detect-same-package = true
force-sort-within-sections = true

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | \.whl
  )/
#  | foo.py           # also separately exclude a file named foo.py in
#                     # the root of the project
)
'''

[tool.mypy]
python_version = "3.10"
files = ["spark_expectations/**/*.py"]
disable_error_code = ["attr-defined", "return-value", "union-attr", "override"]
# plugins = ["pydantic.mypy"]  # TODO: enable once we move to pydantic
allow_untyped_globals = true
check_untyped_defs = false
disallow_untyped_calls = false
disallow_untyped_defs = true

follow_imports = "skip"
ignore_missing_imports = true
implicit_optional = true
pretty = true
warn_no_return = false
warn_unused_configs = true
