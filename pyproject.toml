[build-system]
# requires = ["hatchling"]
requires = ["hatchling", "hatch-vcs"]

build-backend = "hatchling.build"

[project]
name = "spark-expectations"
description = "This project helps us to run Data Quality Rules in flight while spark job is being run"
authors = [{name = "Ashok Singamaneni", email = "ashok.singamaneni@nike.com"}]
readme = "README.md"
dynamic = ["version"]
classifiers = [
  "Programming Language :: Python",
]
# https://www.python.org/doc/versions/
requires-python = ">=3.9,<=3.13"


[tool.hatch.build.targets.wheel]
include = ["spark_expectations"]

[tool.hatch.build.targets.sdist]
include = ["spark_expectations","docs","tests"]

[tool.hatch.version]
source = "vcs"
style = "semver"


dependencies = [
  "pluggy>=1",
  "requests>=2.28.1",
]

[project.optional-dependencies]
pyspark = [
  "pyspark[connect]>=3.0.0,<3.5.6"
]
mkdocstrings = [
  "mkdocstrings[python]==0.27.0"
]

[[tool.hatch.envs.dev.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.envs.dev]
installer = "uv"
latest = true
features = [
  "pyspark",
  "mkdocstrings"
]
dependencies = [
  "black==23.3.0",
  "botocore==1.29.133",
  "cerberus-python-client==2.5.4",
  "coverage==7.2.5",
  "griffe~=1.5.4",
  "ipykernel~=6.29.2",
  "mdx-include>=1.4.1,<2.0.0",
  "mike==1.1.2",
  "mkdocs==1.5.3",
  "mkdocs-autorefs==1.2.0",
  "mkdocs-click==0.8.0",
  "mkdocs-markdownextradata-plugin==0.2.5",
  "mkdocs-material==9.4.0",
  "mypy==1.3.0",
  "numpy==1.26.4",
  "pandas~=2.2.3",
  "pre-commit==3.3.1",
  "prospector~=1.12.1",
  "pytest~=8.3.3",
  "pytest-mock~=3.14.0",
  "types-requests==2.28.11.16",
  "types-setuptools==67.7.0.2",
]

[tool.hatch.envs.dev.scripts]
fmt-check = [
  "black --check spark_expectations/"
]
fmt = [
  "black spark_expectations/"
]
analysis = [
  "prospector --no-autodetect --profile prospector.yaml"
]
type-check = [
  "mypy -p spark_expectations --exclude venv --exclude dist --exclude .idea"
]
# Setup Pre-Commit and Pre-Push Github hooks
setup-hooks = [
  "pre-commit install",
  "pre-commit install --install-hooks"
]
coverage-failfast = [
  "coverage run --source=spark_expectations --omit 'spark_expectations/examples/*' -m pytest -v -x",
  "coverage report -m",
  "coverage xml"
]
coverage-ignore-failure = [
  "coverage run --source=spark_expectations --omit 'spark_expectations/examples/*' -m pytest -v",
  "coverage report -m",
  "coverage html"
]
coverage-report-only = [
  "coverage report -m",
  "coverage html",
]
tests = [
  "pytest -v",
]
deploy-and-serve-docs = [
  "mike deploy -u dev latest",
	"mike set-default latest",
	"mike serve"
]
deploy-docs = [
  "mike deploy --push --update-aliases $VERSION latest"
]
list-dependencies = [
  "uv pip freeze",
]


###  ~~~~~~~~~~~~~~~~~~  ###
#  Code Quality and Style  #
###  ~~~~~~~~~~~~~~~~~~  ###
#

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/#using-pyprojecttoml
# https://docs.astral.sh/ruff/settings/
target-version = "py310"
line-length = 120 # Same as Black.
exclude = [
  # Exclude a variety of commonly ignored directories.
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".venv",
  ".venvs",
  "__pypackages__",
  "__notebooks__",
  "__research__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

[tool.ruff.format]
# https://docs.astral.sh/ruff/formatter/#docstring-formatting
docstring-code-format = true
docstring-code-line-length = 70

[tool.ruff.lint]
select = [
  ## pycodestyle
  "E",
  ## Pyflakes
  "F",
  ## flake8-bugbear
  # "B",
  ## flake8-annotations
  # "ANN",
  ## pyupgrade
  # "UP",
  ## flake8-simplify
  # "SIM",
  ## pep8-naming
  # "N",
  ## isort
  "I",
]
ignore = [
  "F405", # To avoid errors like '`ConfigDict` may be undefined, or defined from star imports: `pydantic`'
  "E501", # To avoid errors like 'line too long (120 > 79 characters)' -> let Black handle this instead
  "F401", # To avoid errors like 'module imported but unused' -> there are too many false positives
  "F403", # To avoid errors like 'import * used; unable to detect undefined names' -> leads to false positives
]
# Unlike Flake8, default to a complexity level of 10.
mccabe.max-complexity = 10
# Allow autofix for all enabled rules (when `--fix` is provided).
fixable = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "T",
  "W",
  "ANN",
  "ARG",
  "BLE",
  "COM",
  "DJ",
  "DTZ",
  "EM",
  "ERA",
  "EXE",
  "FBT",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
force-to-top = ["__future__", "typing"]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "pydantic",
  "pyspark",
  "first-party",
  "local-folder",
]
sections.pydantic = ["pydantic"]
sections.pyspark = ["pyspark"]
detect-same-package = true
force-sort-within-sections = true

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | \.whl
  )/
#  | foo.py           # also separately exclude a file named foo.py in
#                     # the root of the project
)
'''

[tool.mypy]
python_version = "3.10"
files = ["spark_expectations/**/*.py"]
disable_error_code = ["attr-defined", "return-value", "union-attr", "override"]
# plugins = ["pydantic.mypy"]  # TODO: enable once we move to pydantic
allow_untyped_globals = true
check_untyped_defs = false
disallow_untyped_calls = false
disallow_untyped_defs = true

follow_imports = "skip"
ignore_missing_imports = true
implicit_optional = true
pretty = true
warn_no_return = false
warn_unused_configs = true

[tool.pylint.main]
fail-under = 9.5
py-version = "3.10"

[tool.pylint.basic]
# require docstrings for all functions except magic methods (those starting and ending with __) and test methods (those starting with test_).
no-docstring-rgx = "__.*__|test_.*"

[tool.pylint.classes]
exclude-protected = [
  "_asdict",
  "_fields",
  "_replace",
  "_source",
  "_make",
  "os._exit",
  "_jsc",
]

[tool.pylint.design]
max-attributes = 25
max-bool-expr = 5
max-locals = 16
max-parents = 25
min-public-methods = 1

[tool.pylint.format]
# Same as Black.
max-line-length = 120
# Maximum number of lines in a module.
max-module-lines = 1200
# Allow the body of a class to be on the same line as the declaration if body contains single statement.
single-line-class-stmt = true
# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt = true

[tool.pylint.logging]
# The type of string formatting that logging methods do. old means using % formatting, new is for {} formatting.
logging-format-style = "new"

[tool.pylint."messages control"]
confidence = [
  "HIGH",
  "CONTROL_FLOW",
  "INFERENCE",
  "INFERENCE_FAILURE",
  "UNDEFINED",
]
disable = [
  "arguments-differ",
  "bad-inline-option",
  "broad-except",
  "consider-using-set-comprehension",
  "file-ignored",
  "import-outside-toplevel",
  "inconsistent-return-statements",
  "invalid-name",
  "len-as-condition",
  "line-too-long",
  "locally-disabled",
  "logging-fstring-interpolation",
  "no-else-return",
  "no-member",
  "no-self-argument",
  "possibly-used-before-assignment",
  "protected-access",
  "raise-missing-from",
  "raw-checker-failed",
  "suppressed-message",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-branches",
  "too-many-boolean-expressions",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-positional-arguments",
  "too-many-statements",
  "use-implicit-booleaness-not-comparison-to-string",
  "use-implicit-booleaness-not-comparison-to-zero",
  "use-symbolic-message-instead",
  "used-before-assignment",
  "useless-object-inheritance",
  "useless-suppression",
  "W0622",
]
enable = ["logging-not-lazy", "c-extension-no-member"]

[tool.pylint.miscellaneous]
notes = ["FIXME", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 5
