To generate a template for creating new component files in a React application, considering the structure and patterns observed in ui/src/App.tsx, src/layouts/AppLayout.tsx, providers/auth-provider/auth-provider.tsx, and store/auth-store/auth-store.ts, follow these detailed instructions. This template will help maintain consistency and ensure that new components integrate smoothly with the existing application architecture.
Template Instructions for New React Component
1. Setup File and Import Dependencies
Start by creating a new TypeScript file in the appropriate directory (e.g., src/components/YourNewComponent.tsx).
Import React and any necessary hooks (useState, useEffect).
Import any required context providers, custom hooks from the store, or utility functions.
Optionally, import CSS or other styling files.

import React, { FC, useState, useEffect } from 'react';
import { useYourCustomHook } from '@/store';  // Adjust based on your store structure
import { YourContextProvider } from '@/providers';  // If context is needed
import './YourNewComponent.css';  // If specific styles are needed


2. Define Component Props
Define an interface for the component's props if it needs to receive any props.

interface YourNewComponentProps {
  // Define properties here
  exampleProp: string;
}


3. Component Function
Define the functional component using the FC type from React, incorporating props if necessary.
Utilize state management and context providers as needed within the component.

export const YourNewComponent: FC<YourNewComponentProps> = ({ exampleProp }) => {
  const { stateValue, methodFromStore } = useYourCustomHook();  // Using custom store hook

  // Local state example
  const [localState, setLocalState] = useState<string>('');

  // Effect for side operations
  useEffect(() => {
    // Perform side effects here
  }, [exampleProp]);  // Dependency array

  // Component JSX
  return (
    <div className="your-new-component">
      {/* JSX goes here */}
      <p>{exampleProp}</p>
      <p>{stateValue}</p>
      {/* More JSX */}
    </div>
  );
};

4. Writing Unit Tests
Create a test file (e.g., YourNewComponent.test.tsx) and use testing libraries like Vitest, React Testing Library.

import { describe, it, expect, vi } from 'vitest';
import { render, screen } from '@test-utils';
import { YourNewComponent } from './YourNewComponent';

describe('YourNewComponent', () => {
  it('renders correctly with props', () => {
    render(<YourNewComponent exampleProp="Test Prop" />);
    expect(screen.getByText('Test Prop')).toBeInTheDocument();
  });

  // Additional tests for state and effects
  it('updates local state correctly', async () => {
    // Implement test for state updates
  });

  // Example of mocking hooks or context
  vi.mock('@/store', () => ({
    useYourCustomHook: vi.fn(() => ({
      stateValue: 'mocked value',
      methodFromStore: vi.fn(),
    })),
  }));
});


5. Additional Considerations
Ensure proper integration and cleanup in tests, such as unsubscribing from stores or removing listeners. Consider adding PropTypes or TypeScript types for additional type safety and documentation.
Usage
When you need to create a new component, copy this template into the new component file. Adjust imports, props, state management, JSX, and tests according to the specific needs of the component. Ensure that the component's functionality and styling are tested within the context of the application.
This updated template provides a structured approach to creating new components, ensuring they conform to the application's architecture and coding practices, with a strong emphasis on unit testing.